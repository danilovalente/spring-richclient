<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
        "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<chapter id="form-binding" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Forms and binding</title>

  <toc/>

  <section id="form-binding:formmodel-valuemodel">
    <title>FormModel and ValueModel</title>
    <section id="form-binding:formmodel-valuemodel:valuemodel-what">
      <title>What is a ValueModel</title>
      <para>
        A valuemodel provides a way for listening for changes on a property. In its simplest form, it is a property
        listener wrapper around a particular property. Its purpose is to track change, so that secondary functionality
        such as undo functionality and validation can be provided.
      </para>
    </section>
    <section id="form-binding:formmodel-valuemodel:formmodel-what">
      <title>What is a FormModel</title>
      <para>
        A formmodel is a wrapper around a particular instance of an object. In essence, it is a consisting of
        valuemodels for the various properties of an object. It handles the overall state of the object.
      </para>
    </section>
    <section id="form-binding:formmodel-valuemodel:formmodel-default">
      <title>The default formmodel</title>
      <para>
        The default formmodel in Spring Rich Client handles more than just the overall state of the object by managing
        its value object. It also provides :
      </para>
      <itemizedlist>
        <listitem>
          <para>
            Buffering of values, effectively providing undo functionality
          </para>
        </listitem>
        <listitem>
          <para>
            Dirty tracking
          </para>
        </listitem>
        <listitem>
          <para>
            Validation possibilities through validators
          </para>
        </listitem>
        <listitem>
          <para>
            Set certain properties of an object to read-only, even if they have setters
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Creating a formmodel of any given object can be done through this:
      </para>
      <programlisting language="java:nogutter"><xi:include href="../codesamples/binding-forms/java/sample1.java" parse="text"/></programlisting>
      <para>
         From then on, you can set the values of the object through the valueobject.
      </para>
      <programlisting language="java:nogutter"><xi:include href="../codesamples/binding-forms/java/sample2.java" parse="text"/></programlisting>
      <para>
        Valuemodels in formmodels are created on-demand. After creating a formmodel on an object, no valuemodels are
        present until you start calling for them. Spring Rich Client will then make these on-demand.
      </para>
    </section>
    <section id="form-binding:formmodel-valuemodel:buffering">
      <title>Buffering</title>
      <para>
        Buffering provides the necessary plumbing needed for undo functionality. When changing values of property, a
        buffered valuemodel will still hold the old values and can revert to these if necessary.
      </para>
      <programlisting language="java:nogutter"><xi:include href="../codesamples/binding-forms/java/sample3.java" parse="text"/></programlisting>
      <para>
        Calling revert() before a commit on a formmodel will return all properties to their original values. Individual
        valuemodels can be reverted too by calling revert() on them.
      </para>
    </section>
    <section id="form-binding:formmodel-valuemodel:read-only">
      <title>Read-only manipulation</title>
      <para>
        An entire formmodel can be set to be read-only by using the setReadOnly(…) method.
      </para>
      <para>
        Setting individual properties read-only is a little bit more complicated. Out of the box, Spring Rich Client
        will inspect the object and determine whether a property is read-only, based on the existence of a setter method
        for that property.
      </para>
      <para>
        However, there might be cases where you’d want to deliberately change the read-only behavior of a property, even
        if it has a setter. The fact whether a property is set as read-only is held by field metadata.
      </para>
      <para>
        For any given property you can ask the formmodel for the field metadata by calling
      </para>
      <programlisting language="java:nogutter"><xi:include href="../codesamples/binding-forms/java/sample4.java" parse="text"/></programlisting>
      <para>
        Through this field metadata, you can set the read-only property of a property
      </para>
      <programlisting language="java:nogutter"><xi:include href="../codesamples/binding-forms/java/sample5.java" parse="text"/></programlisting>
      <para>
        Obviously, trying to set a property that has no setter to writable will cause an exception when the valuemodels
        are committed (and the respective setters are called).
      </para>
    </section>
    <section id="form-binding:formmodel-valuemodel:validation">
      <title>Validation</title>
      <para>
        The default form model also contains functionality for validating the enclosed values. The validation is done
        through Spring Rich Client’s own validation subsystem by utilizing validators. We’ll discuss the details of
        these validators in detail later.
      </para>
      <para>
        When a property is changed, the validator will be called to check whether the object is still in a consistent
        state. If not, the validator will produce validation errors, which then can be showed to the user through
        various means.
      </para>
      <para>
        Setting a validator on a formmodel is done through
      </para>
      <programlisting language="java:nogutter"><xi:include href="../codesamples/binding-forms/java/sample6.java" parse="text"/></programlisting>
      <para>
        After that, the validation is automatically turned on. If you needed to, you could turn it off by calling
      </para>
      <programlisting language="java:nogutter"><xi:include href="../codesamples/binding-forms/java/sample7.java" parse="text"/></programlisting>
      <para>
        A model can be validated at any time. A model is aware whether it has validation errors, and if so, contains a
        collection of these.
      </para>
      <para>
        For more information on this, refer to the JavaDocs on ValidatingFormModel and DefaultFormModel
      </para>
    </section>
    <section id="form-binding:formmodel-valuemodel:create-formmodel">
      <title>Creating formmodels</title>
      <para>
        To create a formmodel, Spring Rich Client has provided a factory class that can create various formmodels called
        FormModelHelper and is the preferred way to create formmodels.
      </para>
      <para>
        For example, if you want to create a formmodel of an object, the simplest way would be:
      </para>
      <programlisting language="java:nogutter"><xi:include href="../codesamples/binding-forms/java/sample8.java" parse="text"/></programlisting>
      <para>
        With the FormModelHelper, you can create:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            Default formmodels (with validation and buffering)
          </para>
        </listitem>
        <listitem>
          <para>
            Non-buffered formmodels
          </para>
        </listitem>
        <listitem>
          <para>
            Child formmodels of existing formmodels
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Formmodels, at this time, are object based. To create a formmodel, you need to be able to create an object of
        the class to be utilized by the formmodel.
      </para>
      <para>
        There are implementations on the way to make these class-based, but these are still in development and shaky at
        best at the moment.
      </para>
    </section>
  </section>

  <section id="form-binding:binding">
    <title>Binding</title>
    <section id="form-binding:binding:what">
      <title>What is binding</title>
      <para>
         Binding in Spring Rich Client encompasses the connection between a visual component and the state of a certain property.
      </para>
    </section>
    <section id="form-binding:binding:how-works">
      <title>How does binding work and what does it do</title>
      <para>
        Binding is done through a valuemodel. A binding covers only one property at a time, most of the time (a binding
        could be done by aggregating different valuemodels, but that’s way out of scope for this introduction).
      </para>
      <para>
        A binding will transfer all property changes to the object behind it, and vice versa. It’s bound to a particular
        formmodel and property (and therefore, a valuemodel), and is responsible for creating the visual component
      </para>
    </section>
    <section id="form-binding:binding:binders">
      <title>Binders</title>
      <para>
        Binders are factories for bindings. Generally, for each sort of binding you’ll use in your application, you’ll
        have one (or more, if there are specific variants of certain bindings that may be occurring).
      </para>
    </section>
    <section id="form-binding:binding:binder-examples">
      <title>Binder examples</title>
      <para>
        In Spring Rich Client, a number of binders have been implemented out of the box.
      </para>
      <itemizedlist>
        <listitem>
          <para>
            TextComponentBinder: can handle text-type variables like strings
          </para>
        </listitem>
        <listitem>
          <para>
            CheckBoxBinder: can handle Boolean-type variables
          </para>
        </listitem>
        <listitem>
          <para>
            ListBinder: can handle lists
          </para>
        </listitem>
        <listitem>
          <para>
            And many more…
          </para>
        </listitem>
      </itemizedlist>
      <para>
        For Java 5+ there is even a binder available for enums, which visually is represented by a combobox.
      </para>
    </section>
    <section id="form-binding:binding:create-binder">
      <title>Creating a custom binder</title>
      <para>
        Say we want to create a binder for JodaTime’s classes. Java’s standard date classes are bad to work with, so
        this example may even be somewhat useful.
      </para>
      <para>
        We start off by creating the binder. A binder is able to bind any JComponent to a value, so we’ll use SwingX’s
        JXDatePicker class to visually represent the date.
      </para>
      <programlisting language="java:nogutter"><xi:include href="../codesamples/binding-forms/java/sample9.java" parse="text"/></programlisting>
      <para>
        As you can see the class does the 2 way binding. This part
      </para>
      <programlisting language="java:nogutter"><xi:include href="../codesamples/binding-forms/java/sample10.java" parse="text"/></programlisting>
      <para>
        handles the propagation of changes in the formmodel to the actual component, whereas the property change
        listener (which in this case is the binder itself, handled by
      </para>
      <programlisting language="java:nogutter"><xi:include href="../codesamples/binding-forms/java/sample11.java" parse="text"/></programlisting>
      <para>
        The isSettingText flag is there to prevent cyclic calls (formmodel changes component, which change the
        formmodel, which changes, …).
      </para>
      <para>
        Binding the control to the value is done through the doBindControl() method. This method is called to wire the
        component to the binding and prepares all the plumbing to make the binding work.
      </para>
      <para>
        Creating the binder is most of the time the easiest job of the two.
      </para>
      <programlisting language="java:nogutter"><xi:include href="../codesamples/binding-forms/java/sample12.java" parse="text"/></programlisting>
      <para>
        The createControl() method creates the control that is to be used in bindings. Every time a binding is done, a
        new control will be created through this method.
      </para>
      <para>
        The actual binding is done through the doBind(). It will create a binding, do some specific behavior in some
        case (here we’re manipulating some UI properties to alter the JXDatePicker’s appearance.
      </para>
    </section>
  </section>
  <section id="form-binding:forms">
    <title>Forms</title>
    <para>
       Now that we have covered the formmodels and the binding, we can now cover the combination of these.
    </para>
    <section id="form-binding:forms:what">
      <title>What is a form</title>
      <para>
        Whereas a binding covers a single property, a form covers an entire object. It can contain many bindings, backed
        up by a formmodel that wraps the form’s object.
      </para>
    </section>
    <section id="form-binding:forms:create">
      <title>Creating a form</title>
      <para>
        Forms are created for a specific purpose and specific objects. Say we have the following object:
      </para>
      <programlisting language="java:nogutter"><xi:include href="../codesamples/binding-forms/java/sample13.java" parse="text"/></programlisting>
      <para>
        If we want to make a form for this, we might be using something like this
      </para>
      <programlisting language="java:nogutter"><xi:include href="../codesamples/binding-forms/java/sample14.java" parse="text"/></programlisting>
      <para>
        This will result in a panel with 2 text fields next to each other, that represent the 2 fields of the object.
        This form can then be used to show in a view or a dialog. Currently, there is no default view descriptor for
        forms, since these are mostly contained in views in which they only make up a part of the screen (for example,
        in combination with a table).
      </para>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/formsample.png"/>
        </imageobject>
      </mediaobject>
    </section>
    <section id="form-binding:forms:builders">
      <title>FormBuilders</title>
      <para>
        As shown in the example above, forms can be created by using binders and bindings directly. However, for more
        elaborate forms, this method is not really usable (or readable for that matter).
      </para>
      <para>
        To tackle this problem, Spring Rich Client has created form builders. Form builders make form creation a lot
        easier by providing simple addition of properties, labels and other component to forms. Form builders use the
        binding factory facilities built into Spring Rich Client.
      </para>
      <para>
        The binding factory system can set default binders for certain types, so that you don’t need to worry how
        something should look. It can also provide aliases for binders defined in the context, so that you can use these
        swiftly.
      </para>
      <para>
        Building the same form with a form builder would result in
      </para>
      <programlisting language="java:nogutter"><xi:include href="../codesamples/binding-forms/java/sample15.java" parse="text"/></programlisting>
      <para>
         Much simpler and easy to read, isn’t it?
      </para>
      <para>
        An additional advantage in using a form builder is that internationalized labels are supported out of the box.
        In the form builder example no labels are coded, but the form builder will add them automagically.
      </para>
      <para>
        Currently there is a form builder that works with JGoodies FormLayout named TableFormBuilder, and there is also
        one that supports Java’s GridbagLayout. You can always create your own form builder by extending
        AbstractFormBuilder.
      </para>
      <para>
        Starting from version 1.1.0, there is also an advanced form builder included, called FormLayoutFormBuilder. It
        uses JGoodies' FormLayout and allows more customisation than the other formbuilders.
      </para>
    </section>
    <section id="form-binding:forms:binder-selection">
      <title>Binder selection</title>
      <para>
        Spring Rich Client has a mechanism to automatically choose binders based on property names, types or even the
        used Swing components. This is done through BinderSelectionStrategy implementations.
      </para>
      <para>
        The standard implementation is the SwingBinderSelectionStrategy, which already has support for String and
        Boolean type fields.
      </para>
      <para>
        If you want to extend this automatic binder selection, you can configure your own BinderSelectionStrategy in
        your Spring context (which will be picked up by the service locator), and set for example the
        bindersForPropertyTypes map property. This map matches property types to specific binders that you also have
        configured in your Spring context.
      </para>
      <para>
        For example, if you want to change support String, Boolean and Date fields, you can define your selection
        strategy like this
      </para>
      <programlisting language="xml"><xi:include href="../codesamples/binding-forms/xml/sample1.xml" parse="text"/></programlisting>
    </section>
    <section id="form-binding:forms:i18n">
      <title>Internationalisation</title>
      <para>
        Remember the id you can give to your formmodel? This is the part where it’s needed. Spring Rich Client will use
        the formmodel’s id to create the key it'll use to look up the label’s text.
      </para>
      <para>
        Say your formmodel is named "personForm" and you have a field called "firstName". Then in your message bundle
        you’ll have to provide something like this:
      </para>
      <programlisting language="text"><xi:include href="../codesamples/binding-forms/text/sample1.txt" parse="text"/></programlisting>
      <para>
        If no value is found for a key, Spring Rich Client will show the key instead. This way you can easily spot
        missing keys (and don’t need to guess how they are named).
      </para>
    </section>
    <section id="form-binding:forms:child-forms">
      <title>Adding forms to forms, a.k.a. child forms</title>
      <para>
        Forms are just plain components. They can be added to forms as any other component. However, when creating a
        child form, you need to make sure the formmodel of the child form is also a child of the formmodel of that
        form’s parent. That way, events are carried over correctly.
      </para>
      <para>
        Child forms can also be added by using the addChildForm(…) method on a form. This way, the formmodels between
        the two are automatically linked. Bear in mind though, a setFormObject on a parent form does not cause a
        setFormObject on its children. This is something you’ll have to handle yourself.
      </para>
      <warning>TODO: example</warning>
    </section>
    <section id="form-binding:forms:validation">
      <title>Form validation</title>
      <para>
        Form validation is done through the validation subsystem by validating the formmodel (and underlying
        valuemodels). Form component interceptors such as the OverlayValidationInterceptorFactory can then show the
        validation errors to the user. For more information on interceptors, read the next chapter.  
      </para>
    </section>
  </section>
</chapter>
