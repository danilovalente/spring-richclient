<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
        "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<chapter id="applications" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Applications</title>

  <toc/>

  <section id="applications:lifecycle">
    <title>Application lifecycle</title>
    <para>
      The lifecycle in a Spring Rich Client application is what it says it is. It’s the behavior of the application
      through the time when it is running. What the application should do at startup, what it needs to show, how it
      should behave when it’s being closed… these are all aspects of the application lifecycle.
    </para>
    <para>
      In Spring Rich Client, an ApplicationLifecycleAdvisor manages the lifecycle of the application. In our example,
      the lifecycle advisor handles the creation of the command context, what view should be showed initially, what
      command bean should be used for the menu, etc…
    </para>
  </section>

  <section id="applications:hooking">
    <title>Hooking into a lifecycle</title>
    <para>
      In the application lifecycle you can intervene on points within startup, shutdown or other events such as opening
      a window. These hooks are present in the ApplicationLifecycleAdvisor and can for example be used to ask data
      needed before startup.
    </para>
    <para>
      You could also stop an application from exiting (by asking a confirmation for example).
    </para>
  </section>

  <section id="applications:application">
    <title>Application</title>
    <para>
      An application in Spring Rich Client is comprised of 2 things: a lifecycle advisor (how it should behave) and a
      descriptor (what it should do).
    </para>
    <para>
      The Application class is also the class that starts the actual application: it calls the startup hooks, and shows
      the initial window and view.
    </para>
  </section>

  <section id="applications:example-login">
    <title>Example: adding login functionality</title>
    <para>
      Logging into an application is quite common behavior. You’ll probably want to show the login dialog before showing
      your application window (you might want to personalize the application window based on who has logged in).
    </para>
    <para>In Spring Rich Client, this means after the commands have been created (which is one step before the window
      gets created and showed). In this example, we’ll let a imaginary LoginHandler class check whether we can login or
      not. For the record, basic login functionality has been included into Spring Rich Client, but this would bring us
      out of scope for this example. We’ll discuss the security features later.
    </para>
    <para>Assuming our handler will show a login screen and handle the login logic, we only need to hook it into the
      application lifecycle advisor:
    </para>
    <programlisting language="java:nogutter"><xi:include href="../codesamples/applications/java/sample1.java" parse="text"/></programlisting>
    <para>
      As you can see, this is quite easy. Of course you’d want to know when a user is already logged in and just creates
      a new application window (which also triggers this method), so it doesn’t show this login window again, something
      like holding a security context within your application.
    </para>
  </section>

  <section id="applications:other-uses">
    <title>Other possible uses</title>
    <para>
      Lifecycle advisor subclassing can also be handy in other aspects. Any Spring Rich Client application knows which
      lifecycle advisor is used for its execution. You can obtain this by calling
    </para>
    <programlisting language="java:nogutter"><xi:include href="../codesamples/applications/java/sample2.java" parse="text"/></programlisting>
    <para>
      You could for example create an application window factory that delivers different application window applications
      based on which lifecycle advisor was used:
    </para>
    <programlisting language="java:nogutter"><xi:include href="../codesamples/applications/java/sample3.java" parse="text"/></programlisting>
  </section>

  <section id="applications:statusbar">
    <title>Playing with the status bar</title>
    <para>
      Changing the status bar can be done by calling the statusbar through the lifecycle advisor:
    </para>
    <programlisting language="java:nogutter"><xi:include href="../codesamples/applications/java/sample4.java" parse="text"/></programlisting>
    <para>
      Again, if you’re creating your own lifecycle advisor, you’re able to override this method and perhaps supply your
      own status bar implementation.
    </para>
    <para>
      The standard status bar supports:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Displaying messages, normal messages as well as errors
        </para>
      </listitem>
      <listitem>
        <para>
          Containing a progress monitor to track long-running processing (and cancelling them)
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Your status bar may hold a clock, the current logged in user, the connected server, …
    </para>
    <para>
      For example, if you’d want to add a clock to your status bar, you could create your own status bar implementation
      like this:
    </para>
    <programlisting language="java:nogutter"><xi:include href="../codesamples/applications/java/sample5.java" parse="text"/></programlisting>
    <para>
      This will result in a status bar like this:
    </para>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/statusbar.png"/>
      </imageobject>
    </mediaobject>
  </section>

  <section id="applications:elaborate-example">
    <title>Elaborate example: Adding multiple toolbars to the screen</title>
    <para>
      In this example we’ll add multiple toolbar support in Spring Rich Client.
    </para>
    <para>
      Management of the standard toolbar is done in three places:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          The application lifecycle advisor manages the bean name of the toolbar
        </para>
      </listitem>
      <listitem>
        <para>
          The application window puts the actual toolbar on screen
        </para>
      </listitem>
      <listitem>
        <para>
          The application window configurer manages the visibility of the toolbar
        </para>
      </listitem>
    </itemizedlist>
    <para>For this example, I’ll create the first two (and an factory for the application window).
    </para>
    <para>First, we’re going to extend the default lifecycle advisor with the ability to enter multiple toolbars, while
      maintaining backwards compatibility.
    </para>
    <programlisting language="java:nogutter"><xi:include href="../codesamples/applications/java/sample6.java" parse="text"/></programlisting>
    <para>Next, we’re going to create an application window that is able to show the multiple toolbars</para>
    <programlisting language="java:nogutter"><xi:include href="../codesamples/applications/java/sample7.java" parse="text"/></programlisting>
    <para>Finally, a factory to create the new application window</para>
    <programlisting language="java:nogutter"><xi:include href="../codesamples/applications/java/sample8.java" parse="text"/></programlisting>
    <para>Now, to configure the multiple toolbars, here are the beans you need to configure. First the application
      lifecycle in the main application context
    </para>
    <programlisting language="xml"><xi:include href="../codesamples/applications/xml/sample1.xml" parse="text"/></programlisting>
    <para>You also need to define the application window factory in your context, so it’ll use that one.</para>
    <programlisting language="xml"><xi:include href="../codesamples/applications/xml/sample2.xml" parse="text"/></programlisting>
    <para>And then the toolbars in the command context</para>
    <programlisting language="xml"><xi:include href="../codesamples/applications/xml/sample3.xml" parse="text"/></programlisting>
    <para>That’s all there is to it. I’ve started from a project created with the maven archetype, so you can try it out
      if you want. The result will be something like this:
    </para>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/doubletoolbars.png"/>
      </imageobject>
    </mediaobject>
  </section>

  <section id="applications:lookandfeel">
    <title>Changing the look and feel of you application</title>
    <para>
      Most companies work with a specific look-and-feel to use throughout their applications. As Spring Rich Client is a
      Swing based framework, changing the default look-and-feel should be straightforward. Which it is. It’s as simple
      as defining a single bean in your context. In this example, we’ll change it to one of JGoodies’ Plastic themes.
    </para>
    <programlisting language="xml"><xi:include href="../codesamples/applications/xml/sample4.xml" parse="text"/></programlisting>
    <para>
      Say we would like it to Metal, one of the standard look-and-feels in Java
    </para>
    <programlisting language="xml"><xi:include href="../codesamples/applications/xml/sample5.xml" parse="text"/></programlisting>
    <para>
      That's all there is to it. 
    </para>
  </section>
</chapter>
