<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
        "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<chapter id="integration" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Integration with other frameworks</title>

  <toc/>
  
  <section id="integration:flexibility">
    <title>Flexibility</title>
    <para>
      Spring Rich Client, being a framework, provides the flexibility to add support for other Swing frameworks. This
      way, the standard toolkit can be enriched with all sorts of open-source, closed-source or even proprietary
      components.
    </para>
    <para>
      We’ll take a quick look at the current integrations for Spring Rich Client.
    </para>
  </section>
  <section id="integration:flexdock">
    <title>FlexDock</title>
    <para>
      FlexDock is a Java docking framework for use in cross-platform Swing applications. It offers features you'd expect
      in any desktop docking framework such as:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Tabbed and Split Layouts
        </para>
      </listitem>
      <listitem>
        <para>
          Drag-n-Drop capability (with native drag rubber band painting on some platforms)
        </para>
      </listitem>
      <listitem>
        <para>
          Floating windows
        </para>
      </listitem>
      <listitem>
        <para>
          Collapsible Containers to Save Real Estate
        </para>
      </listitem>
      <listitem>
        <para>
          Layout Persistence
        </para>
      </listitem>
    </itemizedlist>
    <para>
      In a nutshell, you need to implement a FlexDock "PerspectiveFactory" that supplies the initial view layout and
      then inject it into the "ApplicationPageFactory" bean in your application context. The perspective factory looks
      like this
    </para>
    <programlisting language="java:nogutter"><xi:include href="../codesamples/integration/java/sample1.java" parse="text"/></programlisting>
    <para>
      And you’ll need to add this to your application context
    </para>
    <programlisting language="xml"><xi:include href="../codesamples/integration/xml/sample1.xml" parse="text"/></programlisting>
    <para>
      This will result in something like this
    </para>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/flexdock.png"/>
      </imageobject>
    </mediaobject>
  </section>
  <section id="integration:vldocking">
    <title>VLDocking</title>
    <para>
      VLDocking is a set of Java components that helps the Swing developer to build applications with docking
      capabilities, and even leverage existing applications to higher standards.
    </para>
    <para>
      Spring Rich Client provides an integration for this docking framework out-of-the-box. Examples on this integration
      are available in the samples included in Spring Rich Client.
    </para>
  </section>
  <section id="integration:jide">
    <title>JIDE</title>
    <para>
      JIDE provides a lot of Swing components that add a plethora of functionalities to the standard Swing toolkit. JIDE has both commercial as open-source components, so the possibilities for integrations are vast.
    </para>
  </section>
  <section id="integration:other">
    <title>Adding support for other frameworks</title>
    <para>
      Support for other Swing libraries can come in different sizes:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Other docking frameworks
        </para>
      </listitem>
      <listitem>
        <para>
          MDI frameworks
        </para>
      </listitem>
      <listitem>
        <para>
          Input controls to create binders and bindings with
        </para>
      </listitem>
      <listitem>
        <para>
          Form frameworks
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Spring Rich Client is meant to be extended, so we’re sure some integrations are still to pop up.
    </para>
  </section>
</chapter>
