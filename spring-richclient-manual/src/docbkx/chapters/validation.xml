<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
        "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<chapter id="validation" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Validation</title>

  <toc/>
  
  <section id="validation:why">
    <title>Why validation</title>
    <para>
      Users make mistakes. They won’t admit it, but they do. As GUI developers, our task is to make sure that their
      mistakes don’t crash or cripple our system. Input validation can help a great deal with this. Spring Rich Client
      supports validators for various input. These are all subclasses of RichValidator.
    </para>
  </section>
  <section id="validation:choices">
    <title>Validation choices</title>
    <para>
      Spring Rich Client has multiple validation strategies:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          The built-in rules system
        </para>
      </listitem>
      <listitem>
        <para>
          Using Hibernate Validator
        </para>
      </listitem>
      <listitem>
        <para>
          Using Spring Modules’ Valang validation framework
        </para>
      </listitem>
      <listitem>
        <para>
          Your own validation framework
        </para>
      </listitem>
      <listitem>
        <para>
          A combination of any of the above
        </para>
      </listitem>
    </itemizedlist>
  </section>
  <section id="validation:rule">
    <title>Rule validation</title>
    <section id="validation:rule:using">
      <title>Using the rules framework</title>
      <para>
        Spring Rich Client has created their own validation framework, which is rule based. A change to a value it put
        through a number of checks, which are contained within a rule, and results in a success or a validation error.
      </para>
      <para>
        The FormModelHelper can create formmodel with rule validation by providing a RulesSource in one of its factory
        methods.
      </para>
      <para>
        A rule source contains different rules for a certain object type. If, for example, we want to validate that the
        field1 property of the TestObject class is never empty, we can create a RulesSource like this:
      </para>
      <programlisting language="java:nogutter"><xi:include href="../codesamples/validation/java/sample1.java" parse="text"/></programlisting>
    </section>
    <section id="validation:rule:contraints">
      <title>Constraints</title>
      <para>
        Constraints contain the actual logic that checks the values.
      </para>
      <para>
        The Constraints class contains a lot of predefined constraints. Among these you can find
      </para>
      <itemizedlist>
        <listitem>
          <para>
            Maximum length of string
          </para>
        </listitem>
        <listitem>
          <para>
            Maximum value
          </para>
        </listitem>
        <listitem>
          <para>
            Not null
          </para>
        </listitem>
        <listitem>
          <para>
            Minimum value
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Creating your own constraint is done by implementing the Constraint interface, which consists of one method
      </para>
      <programlisting language="java:nogutter"><xi:include href="../codesamples/validation/java/sample2.java" parse="text"/></programlisting>
      <para>
        This constraint will test any object. Most of the time, we’ll want to split up functionality to check individual
        properties, so that we can reuse this logic elsewhere.
      </para>
      <para>
        For this, you’ll need to subclass AbstractPropertyConstraint, which needs a property name. Also, in it’s test
        method, it provides an easy way to get values of individual properties.
      </para>
      <para>
        Say we want to create a constraint that checks whether a String property’s value equals “RCP” (silly, but a good
        example). We’ll end up with something like this:
      </para>
      <programlisting language="java:nogutter"><xi:include href="../codesamples/validation/java/sample3.java" parse="text"/></programlisting>
      <para>
        This constraint you can then add to your RulesSource for a specific property.
      </para>
    </section>
    <section id="validation:rule:triggers">
      <title>Validation triggers</title>
      <para>
        Validation on a property is triggered when that property is changed in its valuemodel. Spring Rich Client will
        search for rules for that property and execute them.
      </para>
    </section>
    <section id="validation:rule:dependent">
      <title>Dependent properties</title>
      <para>
        Some rules that are registered for a certain property need to be triggered when another property is changed (for
        example two dates, for which the first needs to be before the last). Spring Rich Client supports this by
        overriding the isDependentOn(…) method. Out-of-the-box, this method returns true if the parameters equals the
        property name for which the rule is defined. However, you can add additional properties to this method. Every
        change in a property that returns true on this method will cause this rule to be checked.
      </para>
      <para>
        An example of this type of rule is the RequiredIfTrue constraint. This constraint can accept a property and
        another PropertyConstraint. For example, you want the driver’s license number required if the age of the person
        is over 21. Creating a constraint for this would be something like this:
      </para>
      <programlisting language="java:nogutter"><xi:include href="../codesamples/validation/java/sample4.java" parse="text"/></programlisting>
      <para>
        This constraint will be fired if the value of driverLicenseNumber or age is fired. Mind you though, the
        validation error will only be reported on the ‘main’ property, which is driverLicenseNumber.
      </para>
    </section>
    <section id="validation:rule:custom-messages">
      <title>Setting i18n messages for custom rules</title>
      <para>
        Getting the message for a custom rule is done by implementing TypeResolvable in your constraint class. For
        convenience, there’s already a constraint class with custom message support called TypeResolvableConstraint.
        Spring Rich Client will then use that message in its validation results.
      </para>
      <para>
        When you provide TypeResolvable support in a property constraint, Spring Rich Client will add the message to the
        property message (which is also used for the label).
      </para>
    </section>
  </section>
  <section id="validation:hibernate">
    <title>Hibernate validator integration</title>
    <para>
      Hibernate Validator is a well-known framework for validating JavaBeans.
    </para>
    <para>
      Simply put, if the object behind a form has Hibernate Validator annotations, by setting the validator to a
      HibernateRulesValidator, it will validate using those annotations. This validator will check all property-based
      validations (no @AssertTrue support at the moment yet). You can even turn off validation for certain properties
      (for example, a code is @NotNull, but in the GUI you’re allowed to leave it empty because you’ll generate one on
      the fly when that’s the case).
    </para>
  </section>
  <section id="validation:valang">
    <title>Valang validation framework integration</title>
    <para>
      For more information on the Valang validation framework, see the Valang documentation. Converting the rules source
      example to Valang would result in something like this (I’ll show the bean definition):
    </para>
    <programlisting language="xml"><xi:include href="../codesamples/validation/xml/sample1.xml" parse="text"/></programlisting>
    <para>
       You can then make a ValangRichValidator for a certain formmodel with that validator.
    </para>
  </section>
  <section id="validation:combining">
    <title>Combining validators</title>
    <para>
      Spring Rich Client also supports combining different validators. For example, AssertTrue validations are currently
      not checked when using the Hibernate Validator integration. To be able to check those validations, you can
      transform these into rules in the Spring Rich Client’s rules system. By combining the two, you then have the
      complete validation for your object.
    </para>
    <para>
      Building a composite validator can be done by the following snippet
    </para>
    <programlisting language="java:nogutter"><xi:include href="../codesamples/validation/java/sample5.java" parse="text"/></programlisting>
  </section>
  <section id="validation:own">
    <title>Integrating your own or another third-party validation framework</title>
    <para>
      If you want to integrate your own validation framework, you’ll need to subclass the RichValidator class and wire
      your validator to produce validation results. 
    </para>
  </section>
</chapter>
