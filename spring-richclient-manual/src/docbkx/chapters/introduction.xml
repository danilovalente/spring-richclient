<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
        "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<chapter id="introduction" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Introduction</title>

  <toc/>

  <section id="introduction:overview">
    <title>Overview</title>
    <para>
      Rich clients are becoming increasingly popular nowadays. A quick search through Google on "rich client framework
      java" returns over 200.000 results.
    </para>
    <para>
      These frameworks can be divided into 2 distinct categories:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          The Swing or SWT based frameworks, designed for out-of-browser applications, to be used with technologies like
          Java Webstart.
        </para>
      </listitem>
      <listitem>
        <para>
          The Rich Internet Application (RIA) frameworks, designed for providing a rich client experience within the
          confines of a web browser (such as Mozilla or Internet Explorer).
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Today, RIA frameworks make up the bulk of the rich client frameworks on the market today. Among these you’ll find
      names like Flex, Google Web Toolkit, Ice Faces, … Their popularity is mainly caused by the ease of deployment: no
      installation is needed, almost every user already has a Web browser. If you look at them at an even wider angle,
      you’ll see that they’re edging closer each day to the spectrum of fully-fledged rich client applications. At that
      point, Swing’s only disadvantage will be the deployment issues. Due to the server-side nature of some frameworks,
      you’ll limit your capabilities more than when you’d be using a Swing-based framework.
    </para>
    <para>
      For Swing (or SWT) based application, the landscape is a bit different. There are only a handful of complete
      frameworks on the market:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Eclipse RCP, the platform on which the Eclipse IDE has been built
        </para>
      </listitem>
      <listitem>
        <para>
          Netbeans RCP, the platform on which the Netbeans IDE has been built
        </para>
      </listitem>
    </itemizedlist>
    <para>
      These frameworks are complete platforms, which have proven themselves through their respective IDE’s to showcase
      their possibilities. However, these possibilities come at a steep cost. With Eclipse RCP, for example, you’ll be
      straying off the known Swing path and enter the world of SWT, and both don’t play well together. With Netbeans
      RCP, you’re mostly confined to the Netbeans IDE to do your development (that is, if you want to develop quickly).
    </para>
    <para>
      Both platforms can be quite cumbersome and come bundled with a complete package. It’s complexity can be
      overwhelming for a standard Swing developer and does not always promote effective, good programming style.
    </para>
    <para>
      The Spring Rich Client framework does not promote itself as a complete platform. Instead, it provides developer a
      clear and easy way to build enterprise-class applications, without straying too far from the standard, well-known
      path, whilst ensuring enough flexibility to cope with the difficult issues coupled to the development of
      enterprise applications. Built on the strong foundations of the Spring Framework, it combines the best practices
      advocated by the Spring Framework with a component-based abstraction on top of Swing to ease development of Swing
      rich client applications.
    </para>
    <para>
      This introduction will try to cover as much ground as possible to let you hit the ground running when starting
      with a Spring Rich Client application.
    </para>
  </section>

  <section id="introduction:dirty">
    <title>Hitting the ground running</title>
    <para>
      We’ll start off the introduction with a concise example of a Spring Rich Client application.
    </para>
    <para>
      As with all Spring applications, Spring beans need to be configured within the container. Currently in Spring Rich
      Client, only XML based configuration has been tested, although with the Spring 2.5 release and its
      component-scanning abilities, it should be possible to narrow your configuration down to the essentials. This is
      something that will possibly be improved in future releases.
    </para>
    <programlisting language="xml"><xi:include href="../codesamples/introduction/xml/sample2.xml" parse="text"/></programlisting>
    <para>
      This sample is in fact one of the Spring Rich Client samples included in the sources, some minor adjustments not
      taken into account. When running the simple project, the output will look something like this:
    </para>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/simpleapp.png"/>
      </imageobject>
    </mediaobject>
  </section>

  <section id="introduction:dissection">
    <title>A quick dissection</title>
    <section id="introduction:anatomy">
      <title>Anatomy of a rich client application</title>
      <para>
        A RCP application in its basic form is quite simple:
      </para>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/simpleapp.png"/>
        </imageobject>
      </mediaobject>
      <para>
        An application consists of a application windows, which in most cases contains:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            The main content pane
          </para>
        </listitem>
        <listitem>
          <para>
            One or more navigational structures, such as a menu bar or a toolbar
          </para>
        </listitem>
        <listitem>
          <para>
            A statusbar to show all sorts of messages to the user
          </para>
        </listitem>
      </itemizedlist>
      <para>
        These can be augmented with global search fields, help functions or other components that an application might
        require.
      </para>
    </section>
    <section id="introduction:appwindow">
      <title>Application windows</title>
      <para>
        An application window is the foundation on which every rich client is built. Without an application window, you
        don’t have a place to put the components that make up your screens.
      </para>
      <para>
        In Spring Rich Client, the application window is represented by the ApplicationWindow class. The application
        window builds the visual window component and shows it to the user.
      </para>
      <para>
        Application windows are not created individually in Spring Rich Client. A factory pattern, called
        ApplicationWindowFactory handles instantiation of an application window. This way windows are created in a clear
        and uniform way throughout the application, without bothering the developer.
      </para>
      <para>
        In our hands-dirty example, you will not find this factory. Spring Rich Client does not need to have a
        ApplicationWindowFactory defined. If it is not configured, Spring Rich Client will fall back on a default
        implementation within the framework, consisting of a simple view area with a menubar, statusbar and toolbar.
      </para>
      <para>
        You can, however, define your own application factory. To do this, you just need to implement a
        ApplicationWindowFactory and define a bean in your application context with your new class. Spring Rich Client
        will pick up the class and use it instead of the default implementation.
      </para>
      <para>
        The above mechanism, also known as service location, is widely used throughout Spring Rich Client, to facilitate
        configuration for the developers.
      </para>
      <para>
        You can for example create an application window factory that leaves out the toolbar, but creates an
        outlook-like bar or task-pane oriented navigation on the left side instead.
      </para>
    </section>
    <section id="introduction:views">
      <title>Views</title>
      <para>
        Application windows are containers for views. A view can be seen as an individual window representing a specific
        state within the application.
      </para>
      <para>
        Views are the main view area of your applications and will contain the bulk of the user interaction, unless
        you’ve chosen for a dialog-based approach. You can for example have a flow of views representing a process
        within your application, or a view containing a table which, when double-clicked, shows a detail of the selected
        item.
      </para>
      <para>
        In our first example, a view shows a HTML file together with a message from a resource bundle.
      </para>
      <para>
        Implementing a view is quite simple. When viewing the example view, you’ll see this:
      </para>
      <programlisting language="java:nogutter"><xi:include href="../codesamples/introduction/java/sample1.java" parse="text"/></programlisting>
      <para>
        AbstractView mandates that you implement the createControl method. This method can deliver any JComponent to
        show its contents. In most cases, this will be some sort of container or panel.
      </para>
    </section>
    <section id="introduction:commands">
      <title>Commands</title>
      <para>
        The entire menu bar system and derived navigational structures are command based. In essence, this means you’ll
        never make a JMenu or JMenuItem manually again. Ever. Simply put, you’ll create a command, which contains code
        that needs to be executed (for example, change a view or print the current selected item). Spring Rich Client
        will handle the creation of the visual components and couple the command behavior to the visual component’s
        behavior.
      </para>
      <para>
        In Spring Rich Client, the command context is a separate context that needs to be defined in the main
        application context lifecycle.
      </para>
      <para>
        In our example, the command context looks like this:
      </para>
      <programlisting language="xml"><xi:include href="../codesamples/introduction/xml/sample1.xml" parse="text"/></programlisting>
      <para>
        As you can see, no Swing-like components are being used to create the menu.
      </para>
    </section>
    <section id="introduction:messages">
      <title>Messages and icons</title>
      <para>
        Internationalizing your application can be quite an important part of your work, and sometimes also one of the
        most time-consuming too.
      </para>
      <para>
        Spring Rich Client supports internationalization through resource bundles defined in the application context
        (see the messageSource bean). For example, Spring Rich Client provides a mechanism to set the title of your
        application through the application descriptor. If you set the key applicationDescriptor.title to some value,
        that value will show up as the title of your application. Messages are found through a MessageSource
        implementation, for which the resource bundle implementation is perhaps the most widely used.
      </para>
      <para>
        The same is true for application icons and images in general. The key applicationDescriptor.icon sets the
        application’s icon. Like messages, the images are found through an ImageSource, which contains property files
        with the keys and the images that go with the keys, and the location where the images can be found (in the jar
        for example, or somewhere else).
      </para>
    </section>
    <section id="introduction:other">
      <title>Other components</title>
      <para>
        Spring Rich Client also contains other components to make rich client programming easier. A form framework that
        handles easy form creation, undo functionality and validation. Exception handling to show visually attractive
        messages when your application goes down the drain. A wizard framework to make data input for the
        not-so-tech-savvy users simpler and much more.
      </para>
      <para>
        We’ll discuss these in detail later.
      </para>
    </section>
  </section>
</chapter>
